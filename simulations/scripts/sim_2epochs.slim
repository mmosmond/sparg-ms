initialize() {

	defineConstant("data_dir", 'data/');
	fname = ("slim_" + asInteger(L) + "L_" + RBP + "RBP_" + format("%.1f", LAMBDA) + "LAMBDA_" +
		 format("%.1f", K) + "K_" + W + "W_" + SIGMAi + "SIGMAi_" +
		 SIGMAd1 + "SIGMAd1_" + SIGMAd2 + "SIGMAd2_" + T12 + "T12_" + MAXT + "MAXT_");
	defineConstant("filename", fname + nrep + "rep");
	defineConstant("output", data_dir + "/" + filename + ".trees");
        defineConstant("Tswitch", MAXT-T12); //when to switch dispersal rate in a forward time perspective
 
        initializeSLiMModelType("nonWF"); // non Wright Fisher
        initializeSLiMOptions(dimensionality="xy"); // two spatial dimensions
        initializeTreeSeq(); // record the true tree sequence (can also speed things up)

        initializeMutationRate(0.0); // no mutations (add these in msprime)
        initializeMutationType("m1", 0.5, "f", 0.0); // irrelevant mutation type
        initializeGenomicElementType("g1", m1, 1.0); // irrelevant genome type
        initializeGenomicElement(g1, 0, asInteger(L)-1); // length of chromosome
        initializeRecombinationRate(RBP); // recombination rate per base

        // spatial interaction for local competition
        initializeInteractionType("i1", "xy", reciprocal=T, maxDistance = 3*SIGMAi); // define interaction type i1, in two spatial dimensions, where individual A has the same effect on B that B does on A (this speeds up computation), and only individuals within distance 3*SIGMA interact (again to speed things up)  
        i1.setInteractionFunction("n", 1.0/(2*PI*SIGMAi^2), SIGMAi); // convert distance to interaction strength using a Gaussian (n for normal), with maximum value 1/(2pi*sigma^2) and standard deviation sigma (ie, this is truly and normal PDF with mean 0 and variance sigma^2)
        
        // spatial interaction for mate choice
        //ancient epoch
        initializeInteractionType("i2", "xy", reciprocal=T, maxDistance = 3*SIGMAd2); // define interaction type i2, in two spatial dimensions, where individual A has the same effect on B that B does on A (this speeds up computation), and only individuals within distance 3*SIGMA interact (again to speed things up)  
        i2.setInteractionFunction("n", 1.0/(2*PI*SIGMAd2^2), SIGMAd2); // convert distance to interaction strength using a Gaussian (n for normal), with maximum value 1/(2pi*sigma^2) and standard deviation sigma (ie, this is truly and normal PDF with mean 0 and variance sigma^2)
   
        // recent epoch 
        initializeInteractionType("i3", "xy", reciprocal=T, maxDistance = 3*SIGMAd1); // define interaction type i2, in two spatial dimensions, where individual A has the same effect on B that B does on A (this speeds up computation), and only individuals within distance 3*SIGMA interact (again to speed things up)  
        i3.setInteractionFunction("n", 1.0/(2*PI*SIGMAd1^2), SIGMAd1); // convert distance to interaction strength using a Gaussian (n for normal), with maximum value 1/(2pi*sigma^2) and standard deviation sigma (ie, this is truly and normal PDF with mean 0 and variance sigma^2)
    }

    reproduction() {
        neighbor_density = i1.totalOfNeighborStrengths(individual); // sum of interaction strengths
        num_offspring = rpois(1, LAMBDA / (1 + neighbor_density / K)); // poisson number of offspring with mean LAMBDA/(1+n_d/K), ie Beverton-Holt density dependence
        mate = sim.generation < Tswitch ? i2.drawByStrength(individual, 1) else i3.drawByStrength(individual, 1);  // single mate for all offspring (ie monogamy), with mate chosen randomly based on interaction strength
        if (size(mate) > 0) { // if there is a mate (possible none within interacting distance, in which case there are no offspring produced)
            for (k in seqLen(num_offspring)) {
                offspring = p1.addCrossed(individual, mate); //make offspring by sexual reproduction
                pos = sim.generation < Tswitch ? individual.spatialPosition + rnorm(2, 0, SIGMAd2) else individual.spatialPosition + rnorm(2, 0, SIGMAd1); // set position of offspring as random normal in both directions
                offspring.setSpatialPosition(p1.pointReflected(pos)); // put offspring in its place
            }
        }
    }
    
    1 early() {
        sim.rescheduleScriptBlock(s1, start=MAXT, end=MAXT); //define end point of sim
        sim.rescheduleScriptBlock(s2, start=1, end=(Tswitch-2)); //ancient dispersal epoch
        sim.rescheduleScriptBlock(s3, start=(Tswitch-1), end=MAXT); //modern dispersal epoch (make sure you evalaute i3 in generation before you use iti, since reproduction occurs before late events)
	sim.addSubpop("p1", asInteger(round(K * W * W))); //set population size at carrying capacity
        p1.setSpatialBounds(c(0.0, 0.0, W, W)); //set spatial plane
        p1.individuals.setSpatialPosition(p1.pointUniform(asInteger(round(K*W*W)))); // start with uniform distribution across range
    }

    early() { // survival probabilities
        p1.fitnessScaling = 1; //all individuals have same fitness (neutral)
        inds = sim.subpopulations.individuals;
        inds[inds.age > 0].fitnessScaling = 0.0; //remove adults to make discrete generations
    }

    s2 late() {
        i1.evaluate(); //calculate interactions
    	i2.evaluate();
        if (sim.generation % 1000 == 0) {
	   catn(sim.generation + "/" + MAXT);
	}
     }
    
    s3 late() {
        i1.evaluate(); //calculate interactions
    	i3.evaluate();
        if (sim.generation % 1000 == 0) {
	   catn(sim.generation + "/" + MAXT);
	}
     }

    s1 late () {
        sim.treeSeqOutput(output); //output treesequence
        catn("Done.");
        sim.simulationFinished();
    }
